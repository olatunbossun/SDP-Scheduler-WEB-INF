// Decompiled by DJ v3.5.5.77 Copyright 2003 Atanas Neshkov  Date: 8/31/2006 11:04:57 AM
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3)
// Source File Name:   TelnetWrapper.java

package com.celtel.databundle.service.utilities;

import java.awt.Dimension;
import java.io.*;
import java.net.Socket;
import java.util.Vector;

/**
 * The telnet wrapper is a sample class for how to use the telnet protocol
 * handler of the JTA source package. To write a program using the wrapper
 * you may use the following piece of code as an example:
 * <PRE>
 *   TelnetWrapper telnet = new TelnetWrapper();
 *   try {
 *     telnet.connect(args[0], 23);
 *     telnet.login("user", "password");
 *     telnet.setPrompt("user@host");
 *     telnet.waitfor("Terminal type?");
 *     telnet.send("dumb");
 *     System.out.println(telnet.send("ls -l"));
 *   } catch(java.io.IOException e) {
 *     e.printStackTrace();
 *   }
 * </PRE>
 * Please keep in mind that the password is visible for anyone who can
 * download the class file. So use this only for public accounts or if
 * you are absolutely sure nobody can see the file.
 * <P>
 * <B>Maintainer:</B> Matthias L. Jugel
 *
 * @version $Id: TelnetWrapper.java,v 1.8 2001/11/04 20:50:29 marcus Exp $
 * @author Matthias L. Jugel, Marcus Meißner
 */
public class TelnetWrapper extends TelnetProtocolHandler {

    /** debugging level */
    private final static int debug = 0;

    protected ScriptHandler scriptHandler = new ScriptHandler();
    private Thread reader;

    protected InputStream in;
    protected OutputStream out;
    protected Socket socket;
    protected String host;
    protected int port = 23;
    protected Vector script = new Vector();

    /** Connect the socket and open the connection. */
    public boolean connect(String host, int port) {
        if (debug > 0) {
            System.err.println("TelnetWrapper: connect(" + host + "," + port +
                               ")");
        }
        try {
            socket = new java.net.Socket(host, port);
            socket.setKeepAlive(true);

            in = socket.getInputStream();
            out = socket.getOutputStream();
            reset();
            return true;
        } catch (Exception e) {
            System.err.println("TelnetWrapper: Connect >" + e.getMessage());
            disconnect();
            return false;
        }
    }

    /** Disconnect the socket and close the connection. */
    public boolean disconnect() {
        if (debug > 0) {
            System.err.println("TelnetWrapper: disconnect()");
        }
        try {
            if (socket != null) {
                socket.close();
                return true;
            }
            return true;

        } catch (Exception e) {
            System.err.println("TelnetWrapper: DisConnect >" + e.getMessage());
            return false;
        }

    }

    /** sent on IAC EOR (prompt terminator for remote access systems). */
    public void notifyEndOfRecord() {
    }

    /**
     * Login into remote host. This is a convenience method and only
     * works if the prompts are "login:" and "Password:".
     * @param user the user name
     * @param pwd the password
     */
    public void login(String user, String pwd) throws IOException {
        waitfor("login:"); // throw output away
        send(user);
        waitfor("Password:"); // throw output away
        send(pwd);
    }

    /**
     * Set the prompt for the send() method.
     */
    private String prompt = null;
    public void setPrompt(String prompt) {
        this.prompt = prompt;
    }

    /**
     * Send a command to the remote host. A newline is appended and if
     * a prompt is set it will return the resulting data until the prompt
     * is encountered.
     * @param cmd the command
     * @return output of the command or null if no prompt is set
     */
    public String send(String cmd) throws IOException {
        write((cmd + "\n").getBytes());
        if (prompt != null) {
            return waitfor(prompt);
        }
        return null;
    }

    /**
     * Wait for a string to come from the remote host and return all
     * that characters that are received until that happens (including
     * the string being waited for).
     *
     * @param match the string to look for
     * @return skipped characters
     */

    public String waitfor(String[] searchElements) throws IOException {

        try {
            ScriptHandler[] handlers = new ScriptHandler[searchElements.length];
            for (int i = 0; i < searchElements.length; i++) {
                // initialize the handlers
                handlers[i] = new ScriptHandler();
                handlers[i].setup(searchElements[i]);
            }

            byte[] b = new byte[256];
            int n = 0;
            StringBuffer ret = new StringBuffer();
            String current;
            int loopcount = 0;
            while ((n >= 0)) {

                n = read(b);
                if (n > 0) {
                    current = new String(b, 0, n);
                    if (debug > 0) {
                        System.err.print(current);
                    }
                    ret.append(current);
                    for (int i = 0; i < handlers.length; i++) {
                        if (handlers[i].match(b, n)) {
                            System.out.println("loops counted = " + loopcount);
                            return ret.toString();
                        } // if
                    } // for
                } // if
                if (loopcount == 10000) {
                    n = -1; //Segun:I implemented this sentinel to break from the loop after checking 10,000 times
                }
                loopcount++;
            } // while
            System.out.println("loops counted = " + loopcount);
            return null; // should never happen
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }

    }

    public String waitfor(String match) throws IOException {
        String[] matches = new String[1];

        matches[0] = match;
        return waitfor(matches);
    }

    /**
     * Read data from the socket and use telnet negotiation before returning
     * the data read.
     * @param b the input buffer to read in
     * @return the amount of bytes read
     */
    public int read(byte[] b) throws IOException {
        int n = negotiate(b);
        try {
            if (n > 0) {
                return n;
            }

            while (n <= 0) {
                do {
                    n = negotiate(b);
                    if (n > 0) {
                        return n;
                    }
                } while (n == 0);
                n = in.read(b);
                if (n < 0) {
                    return n;
                }
                inputfeed(b, n);
                n = negotiate(b);
            }
            return n;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }

    /**
     *Get the status of the connection
     */
    public boolean Isconnected() {
        try {
            if (socket != null) {
                socket.setKeepAlive(true);
                return socket.isConnected();
            }
            return false;
        } catch (Exception e) {
            // e.printStackTrace();
            return false;
        }
    }

    /**
     * Write data to the socket.
     * @param b the buffer to be written
     */
    public void write(byte[] b) throws IOException {
        try {
            out.write(b);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public String getTerminalType() {
        return "dumb";
    }

    public Dimension getWindowSize() {
        return new Dimension(80, 24);
    }

    public void setLocalEcho(boolean echo) {
        if (debug > 0) {
            System.err.println("local echo " + (echo ? "on" : "off"));
        }
    }
}
